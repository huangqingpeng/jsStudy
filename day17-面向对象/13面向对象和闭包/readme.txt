什么是闭包？
	闭包是指可以包含自由（未绑定到特定对象）【变量】的【代码块】；这些变量不是在这个代码块内或者任何【全局】上下文中定义的，而是在定义代码块的【环境】中定义（局部变量）。->局部变量在【函数】中定义的
	备注：js中没有块级作用域  在选择语句、循环句中没有作用域的概念.
		在js中，函数具有作用域的性质
	
	通俗的讲，在js中，闭包和变量有关系，所有的函数都可以看成闭包 
	闭包：就是在函数中被包养的变量。 
	
	对于闭包，可以更加有戏.
		对于闭包中被包养的变量，函数之外是没有办法访问的。若想要访问函数中被包养的变量，可以同函数嵌套返回实现。
		

从技术角度来分析：
	变量 和 函数
	作用域：
		全局作用域
			全局变量  ->可以在程序中的任何地方访问。
		局部作用域
			局部变量->仅仅只能在当前执行环境（本作用域）中使用
		
	作用域链：
		不论是全局作用域，还是局部作用域，都有属于自己的【作用域链】
		活动对象->每个作用域中都会有一个活动对象来存放当前作用域中的变量.
		
		在函数中，访问一个变量时，其实就是在查找变量。查找的过程，先从本作用域中活动对象中找，若找不到，则向上找另一活动对象，这样从本多活对象向外找的这个过程，被称作为“作用域链”。
		
	
	基本数据类型和引用数据类型的区别
	
	垃圾回收机制（GC） -->清除数据，释放内存
		在函数中，正常情况下，当一个函数被执行完了之后，里面的相关本作用域中的变量会被垃圾回收机制回收，释放内存
		执行完了，里面的变量或其他函数将不再被使用。
		全局变量，若不手动删除，则会在页面关闭后，被回收。
		垃圾回收，若一个变量被标志位null时，GC则会回收

闭包的缺点：
	慎用！因为容易产生相互引用，而造成内存泄漏
	

闭包的优点：
	防止变量全局污染    ->模仿块级作用域
	可以实现模块化开发
	
	

		
		


	
		
		

	